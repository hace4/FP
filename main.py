from telegram import InlineKeyboardButton, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent, Update
from telegram.ext import Application, InlineQueryHandler, CommandHandler, CallbackContext

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7693761118:AAE147f6yxKx2MNd90BiBHccv05N_P_SB9k'

# URL Mini App, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ
MINI_APP_URL = 'https://t.me/FAbricaFP_bot?start=mini_app'

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
CHANNEL_ID = '-1002216844212'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Unicode ID —ç–º–æ–¥–∑–∏
def get_emoji_unicode(emoji: str) -> str:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–º–æ–¥–∑–∏ –≤ Unicode –∫–æ–¥
    return ' '.join([f'U+{ord(c):04X}' for c in emoji])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
async def inline_query_handler(update: Update, context: CallbackContext):
    query = update.inline_query.query
    results = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
    keyboard = [
        [InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ωüõí", url=MINI_APP_URL), InlineKeyboardButton("–û—Ç–∑—ã–≤—ã", url="https://t.me/+jhhFUi7OrNE0ZDYy")],
        
        #[InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å MiniApp", web_app={"url": "https://7acb-91-77-161-155.ngrok-free.app"})],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ
    results.append(
        InlineQueryResultArticle(
            id="1",
            title="–ú–∞–≥–∞–∑–∏–Ω",
            input_message_content=InputTextMessageContent("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω."), 
            reply_markup=reply_markup
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.inline_query.answer(results)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app={"url": "https://fabricapara.shop/"})],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
        reply_markup=reply_markup
    )
def unicode_to_emoji(unicode_string):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º (–∫–∞–∂–¥—ã–π –∫–æ–¥ Unicode –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º)
    unicode_codes = unicode_string.split()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π Unicode –∫–æ–¥ –≤ —Å–∏–º–≤–æ–ª —Å –ø–æ–º–æ—â—å—é chr()
    emoji_string = ''.join([chr(int(code, 16)) for code in unicode_codes])
    
    return emoji_string
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async def send_message_to_channel(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω üõí", url=MINI_APP_URL), InlineKeyboardButton("–û—Ç–∑—ã–≤—ã‚òëÔ∏è", url="https://t.me/+jhhFUi7OrNE0ZDYy")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text="–ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–∑—ã–≤—ã –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ",
            reply_markup=reply_markup
        )
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
async def premium_emojis(update: Update, context: CallbackContext):
    # –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ —Å Telegram Premium
    premium_emojis = chr(int("U+1F6D2", 16))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ –æ—Ç–≤–µ—Ç
    await update.message.reply_text(f"–ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏: {premium_emojis}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Unicode ID —ç–º–æ–¥–∑–∏
async def emoji_id(update: Update, context: CallbackContext):
    if update.message.text:
        emoji = update.message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        if len(emoji) > 0:
            emoji_unicode = get_emoji_unicode(emoji)  # –ü–æ–ª—É—á–∞–µ–º Unicode ID
            await update.message.reply_text(f"Unicode –∫–æ–¥ –¥–ª—è —ç–º–æ–¥–∑–∏ '{emoji}': {emoji_unicode}")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ Unicode ID.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CommandHandler('start', start))
    application.add_handler(InlineQueryHandler(inline_query_handler))
    application.add_handler(CommandHandler('sendtoc', send_message_to_channel))
    application.add_handler(CommandHandler('premium_emojis', premium_emojis))  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
    application.add_handler(CommandHandler('emoji_id', emoji_id))  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Unicode ID —ç–º–æ–¥–∑–∏

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
